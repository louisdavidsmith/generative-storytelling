// Code generated by protoc-gen-go-grpc. DO NOT EDIT.
// versions:
// - protoc-gen-go-grpc v1.5.1
// - protoc             v5.27.3
// source: proto/query.proto

package query

import (
	context "context"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
)

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
// Requires gRPC-Go v1.64.0 or later.
const _ = grpc.SupportPackageIsVersion9

const (
	QueryService_CreateAdventure_FullMethodName             = "/query.QueryService/CreateAdventure"
	QueryService_CreateAdventureLore_FullMethodName         = "/query.QueryService/CreateAdventureLore"
	QueryService_CreateCharacter_FullMethodName             = "/query.QueryService/CreateCharacter"
	QueryService_GetAdventureLore_FullMethodName            = "/query.QueryService/GetAdventureLore"
	QueryService_GetConversationHistory_FullMethodName      = "/query.QueryService/GetConversationHistory"
	QueryService_GetPlayerCharacteristics_FullMethodName    = "/query.QueryService/GetPlayerCharacteristics"
	QueryService_GetNarrativeState_FullMethodName           = "/query.QueryService/GetNarrativeState"
	QueryService_UpdateConversationHistory_FullMethodName   = "/query.QueryService/UpdateConversationHistory"
	QueryService_UpdatePlayerCharacteristics_FullMethodName = "/query.QueryService/UpdatePlayerCharacteristics"
	QueryService_UpdateNarrativeState_FullMethodName        = "/query.QueryService/UpdateNarrativeState"
)

// QueryServiceClient is the client API for QueryService service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://pkg.go.dev/google.golang.org/grpc/?tab=doc#ClientConn.NewStream.
type QueryServiceClient interface {
	CreateAdventure(ctx context.Context, in *CreateAdventureRequest, opts ...grpc.CallOption) (*CreateAdventureResponse, error)
	CreateAdventureLore(ctx context.Context, in *CreateAdventureLoreRequest, opts ...grpc.CallOption) (*CreateAdventureLoreResponse, error)
	CreateCharacter(ctx context.Context, in *CreateCharacterRequest, opts ...grpc.CallOption) (*CreateCharacterResponse, error)
	GetAdventureLore(ctx context.Context, in *GetAdventureLoreRequest, opts ...grpc.CallOption) (*GetAdventureLoreResponse, error)
	GetConversationHistory(ctx context.Context, in *GetConversationHistoryRequest, opts ...grpc.CallOption) (*GetConversationHistoryResponse, error)
	GetPlayerCharacteristics(ctx context.Context, in *GetPlayerCharacteristicsRequest, opts ...grpc.CallOption) (*GetPlayerCharacteristicsResponse, error)
	GetNarrativeState(ctx context.Context, in *GetNarrativeStateRequest, opts ...grpc.CallOption) (*GetNarrativeStateResponse, error)
	UpdateConversationHistory(ctx context.Context, in *UpdateConversationHistoryRequest, opts ...grpc.CallOption) (*UpdateConversationHistoryResponse, error)
	UpdatePlayerCharacteristics(ctx context.Context, in *UpdatePlayerCharacteristicsRequest, opts ...grpc.CallOption) (*UpdatePlayerCharacteristicsResponse, error)
	UpdateNarrativeState(ctx context.Context, in *UpdateNarrativeStateRequest, opts ...grpc.CallOption) (*UpdateNarrativeStateResponse, error)
}

type queryServiceClient struct {
	cc grpc.ClientConnInterface
}

func NewQueryServiceClient(cc grpc.ClientConnInterface) QueryServiceClient {
	return &queryServiceClient{cc}
}

func (c *queryServiceClient) CreateAdventure(ctx context.Context, in *CreateAdventureRequest, opts ...grpc.CallOption) (*CreateAdventureResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(CreateAdventureResponse)
	err := c.cc.Invoke(ctx, QueryService_CreateAdventure_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *queryServiceClient) CreateAdventureLore(ctx context.Context, in *CreateAdventureLoreRequest, opts ...grpc.CallOption) (*CreateAdventureLoreResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(CreateAdventureLoreResponse)
	err := c.cc.Invoke(ctx, QueryService_CreateAdventureLore_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *queryServiceClient) CreateCharacter(ctx context.Context, in *CreateCharacterRequest, opts ...grpc.CallOption) (*CreateCharacterResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(CreateCharacterResponse)
	err := c.cc.Invoke(ctx, QueryService_CreateCharacter_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *queryServiceClient) GetAdventureLore(ctx context.Context, in *GetAdventureLoreRequest, opts ...grpc.CallOption) (*GetAdventureLoreResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(GetAdventureLoreResponse)
	err := c.cc.Invoke(ctx, QueryService_GetAdventureLore_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *queryServiceClient) GetConversationHistory(ctx context.Context, in *GetConversationHistoryRequest, opts ...grpc.CallOption) (*GetConversationHistoryResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(GetConversationHistoryResponse)
	err := c.cc.Invoke(ctx, QueryService_GetConversationHistory_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *queryServiceClient) GetPlayerCharacteristics(ctx context.Context, in *GetPlayerCharacteristicsRequest, opts ...grpc.CallOption) (*GetPlayerCharacteristicsResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(GetPlayerCharacteristicsResponse)
	err := c.cc.Invoke(ctx, QueryService_GetPlayerCharacteristics_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *queryServiceClient) GetNarrativeState(ctx context.Context, in *GetNarrativeStateRequest, opts ...grpc.CallOption) (*GetNarrativeStateResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(GetNarrativeStateResponse)
	err := c.cc.Invoke(ctx, QueryService_GetNarrativeState_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *queryServiceClient) UpdateConversationHistory(ctx context.Context, in *UpdateConversationHistoryRequest, opts ...grpc.CallOption) (*UpdateConversationHistoryResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(UpdateConversationHistoryResponse)
	err := c.cc.Invoke(ctx, QueryService_UpdateConversationHistory_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *queryServiceClient) UpdatePlayerCharacteristics(ctx context.Context, in *UpdatePlayerCharacteristicsRequest, opts ...grpc.CallOption) (*UpdatePlayerCharacteristicsResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(UpdatePlayerCharacteristicsResponse)
	err := c.cc.Invoke(ctx, QueryService_UpdatePlayerCharacteristics_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *queryServiceClient) UpdateNarrativeState(ctx context.Context, in *UpdateNarrativeStateRequest, opts ...grpc.CallOption) (*UpdateNarrativeStateResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(UpdateNarrativeStateResponse)
	err := c.cc.Invoke(ctx, QueryService_UpdateNarrativeState_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// QueryServiceServer is the server API for QueryService service.
// All implementations must embed UnimplementedQueryServiceServer
// for forward compatibility.
type QueryServiceServer interface {
	CreateAdventure(context.Context, *CreateAdventureRequest) (*CreateAdventureResponse, error)
	CreateAdventureLore(context.Context, *CreateAdventureLoreRequest) (*CreateAdventureLoreResponse, error)
	CreateCharacter(context.Context, *CreateCharacterRequest) (*CreateCharacterResponse, error)
	GetAdventureLore(context.Context, *GetAdventureLoreRequest) (*GetAdventureLoreResponse, error)
	GetConversationHistory(context.Context, *GetConversationHistoryRequest) (*GetConversationHistoryResponse, error)
	GetPlayerCharacteristics(context.Context, *GetPlayerCharacteristicsRequest) (*GetPlayerCharacteristicsResponse, error)
	GetNarrativeState(context.Context, *GetNarrativeStateRequest) (*GetNarrativeStateResponse, error)
	UpdateConversationHistory(context.Context, *UpdateConversationHistoryRequest) (*UpdateConversationHistoryResponse, error)
	UpdatePlayerCharacteristics(context.Context, *UpdatePlayerCharacteristicsRequest) (*UpdatePlayerCharacteristicsResponse, error)
	UpdateNarrativeState(context.Context, *UpdateNarrativeStateRequest) (*UpdateNarrativeStateResponse, error)
	mustEmbedUnimplementedQueryServiceServer()
}

// UnimplementedQueryServiceServer must be embedded to have
// forward compatible implementations.
//
// NOTE: this should be embedded by value instead of pointer to avoid a nil
// pointer dereference when methods are called.
type UnimplementedQueryServiceServer struct{}

func (UnimplementedQueryServiceServer) CreateAdventure(context.Context, *CreateAdventureRequest) (*CreateAdventureResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method CreateAdventure not implemented")
}
func (UnimplementedQueryServiceServer) CreateAdventureLore(context.Context, *CreateAdventureLoreRequest) (*CreateAdventureLoreResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method CreateAdventureLore not implemented")
}
func (UnimplementedQueryServiceServer) CreateCharacter(context.Context, *CreateCharacterRequest) (*CreateCharacterResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method CreateCharacter not implemented")
}
func (UnimplementedQueryServiceServer) GetAdventureLore(context.Context, *GetAdventureLoreRequest) (*GetAdventureLoreResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetAdventureLore not implemented")
}
func (UnimplementedQueryServiceServer) GetConversationHistory(context.Context, *GetConversationHistoryRequest) (*GetConversationHistoryResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetConversationHistory not implemented")
}
func (UnimplementedQueryServiceServer) GetPlayerCharacteristics(context.Context, *GetPlayerCharacteristicsRequest) (*GetPlayerCharacteristicsResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetPlayerCharacteristics not implemented")
}
func (UnimplementedQueryServiceServer) GetNarrativeState(context.Context, *GetNarrativeStateRequest) (*GetNarrativeStateResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetNarrativeState not implemented")
}
func (UnimplementedQueryServiceServer) UpdateConversationHistory(context.Context, *UpdateConversationHistoryRequest) (*UpdateConversationHistoryResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method UpdateConversationHistory not implemented")
}
func (UnimplementedQueryServiceServer) UpdatePlayerCharacteristics(context.Context, *UpdatePlayerCharacteristicsRequest) (*UpdatePlayerCharacteristicsResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method UpdatePlayerCharacteristics not implemented")
}
func (UnimplementedQueryServiceServer) UpdateNarrativeState(context.Context, *UpdateNarrativeStateRequest) (*UpdateNarrativeStateResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method UpdateNarrativeState not implemented")
}
func (UnimplementedQueryServiceServer) mustEmbedUnimplementedQueryServiceServer() {}
func (UnimplementedQueryServiceServer) testEmbeddedByValue()                      {}

// UnsafeQueryServiceServer may be embedded to opt out of forward compatibility for this service.
// Use of this interface is not recommended, as added methods to QueryServiceServer will
// result in compilation errors.
type UnsafeQueryServiceServer interface {
	mustEmbedUnimplementedQueryServiceServer()
}

func RegisterQueryServiceServer(s grpc.ServiceRegistrar, srv QueryServiceServer) {
	// If the following call pancis, it indicates UnimplementedQueryServiceServer was
	// embedded by pointer and is nil.  This will cause panics if an
	// unimplemented method is ever invoked, so we test this at initialization
	// time to prevent it from happening at runtime later due to I/O.
	if t, ok := srv.(interface{ testEmbeddedByValue() }); ok {
		t.testEmbeddedByValue()
	}
	s.RegisterService(&QueryService_ServiceDesc, srv)
}

func _QueryService_CreateAdventure_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(CreateAdventureRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(QueryServiceServer).CreateAdventure(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: QueryService_CreateAdventure_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(QueryServiceServer).CreateAdventure(ctx, req.(*CreateAdventureRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _QueryService_CreateAdventureLore_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(CreateAdventureLoreRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(QueryServiceServer).CreateAdventureLore(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: QueryService_CreateAdventureLore_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(QueryServiceServer).CreateAdventureLore(ctx, req.(*CreateAdventureLoreRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _QueryService_CreateCharacter_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(CreateCharacterRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(QueryServiceServer).CreateCharacter(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: QueryService_CreateCharacter_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(QueryServiceServer).CreateCharacter(ctx, req.(*CreateCharacterRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _QueryService_GetAdventureLore_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetAdventureLoreRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(QueryServiceServer).GetAdventureLore(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: QueryService_GetAdventureLore_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(QueryServiceServer).GetAdventureLore(ctx, req.(*GetAdventureLoreRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _QueryService_GetConversationHistory_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetConversationHistoryRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(QueryServiceServer).GetConversationHistory(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: QueryService_GetConversationHistory_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(QueryServiceServer).GetConversationHistory(ctx, req.(*GetConversationHistoryRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _QueryService_GetPlayerCharacteristics_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetPlayerCharacteristicsRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(QueryServiceServer).GetPlayerCharacteristics(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: QueryService_GetPlayerCharacteristics_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(QueryServiceServer).GetPlayerCharacteristics(ctx, req.(*GetPlayerCharacteristicsRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _QueryService_GetNarrativeState_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetNarrativeStateRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(QueryServiceServer).GetNarrativeState(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: QueryService_GetNarrativeState_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(QueryServiceServer).GetNarrativeState(ctx, req.(*GetNarrativeStateRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _QueryService_UpdateConversationHistory_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(UpdateConversationHistoryRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(QueryServiceServer).UpdateConversationHistory(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: QueryService_UpdateConversationHistory_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(QueryServiceServer).UpdateConversationHistory(ctx, req.(*UpdateConversationHistoryRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _QueryService_UpdatePlayerCharacteristics_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(UpdatePlayerCharacteristicsRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(QueryServiceServer).UpdatePlayerCharacteristics(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: QueryService_UpdatePlayerCharacteristics_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(QueryServiceServer).UpdatePlayerCharacteristics(ctx, req.(*UpdatePlayerCharacteristicsRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _QueryService_UpdateNarrativeState_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(UpdateNarrativeStateRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(QueryServiceServer).UpdateNarrativeState(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: QueryService_UpdateNarrativeState_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(QueryServiceServer).UpdateNarrativeState(ctx, req.(*UpdateNarrativeStateRequest))
	}
	return interceptor(ctx, in, info, handler)
}

// QueryService_ServiceDesc is the grpc.ServiceDesc for QueryService service.
// It's only intended for direct use with grpc.RegisterService,
// and not to be introspected or modified (even as a copy)
var QueryService_ServiceDesc = grpc.ServiceDesc{
	ServiceName: "query.QueryService",
	HandlerType: (*QueryServiceServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "CreateAdventure",
			Handler:    _QueryService_CreateAdventure_Handler,
		},
		{
			MethodName: "CreateAdventureLore",
			Handler:    _QueryService_CreateAdventureLore_Handler,
		},
		{
			MethodName: "CreateCharacter",
			Handler:    _QueryService_CreateCharacter_Handler,
		},
		{
			MethodName: "GetAdventureLore",
			Handler:    _QueryService_GetAdventureLore_Handler,
		},
		{
			MethodName: "GetConversationHistory",
			Handler:    _QueryService_GetConversationHistory_Handler,
		},
		{
			MethodName: "GetPlayerCharacteristics",
			Handler:    _QueryService_GetPlayerCharacteristics_Handler,
		},
		{
			MethodName: "GetNarrativeState",
			Handler:    _QueryService_GetNarrativeState_Handler,
		},
		{
			MethodName: "UpdateConversationHistory",
			Handler:    _QueryService_UpdateConversationHistory_Handler,
		},
		{
			MethodName: "UpdatePlayerCharacteristics",
			Handler:    _QueryService_UpdatePlayerCharacteristics_Handler,
		},
		{
			MethodName: "UpdateNarrativeState",
			Handler:    _QueryService_UpdateNarrativeState_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "proto/query.proto",
}
