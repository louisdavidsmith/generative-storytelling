// Code generated by protoc-gen-go-grpc. DO NOT EDIT.
// versions:
// - protoc-gen-go-grpc v1.5.1
// - protoc             v5.27.3
// source: proto/generation.proto

package generation

import (
	context "context"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
)

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
// Requires gRPC-Go v1.64.0 or later.
const _ = grpc.SupportPackageIsVersion9

const (
	GenerationService_GenerateResponseStream_FullMethodName = "/generation.GenerationService/GenerateResponseStream"
	GenerationService_GenerateRepsonseBatch_FullMethodName  = "/generation.GenerationService/GenerateRepsonseBatch"
)

// GenerationServiceClient is the client API for GenerationService service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://pkg.go.dev/google.golang.org/grpc/?tab=doc#ClientConn.NewStream.
type GenerationServiceClient interface {
	GenerateResponseStream(ctx context.Context, in *GenerateResponseRequest, opts ...grpc.CallOption) (grpc.ServerStreamingClient[StreamResponse], error)
	GenerateRepsonseBatch(ctx context.Context, in *GenerateResponseRequest, opts ...grpc.CallOption) (*BatchResponse, error)
}

type generationServiceClient struct {
	cc grpc.ClientConnInterface
}

func NewGenerationServiceClient(cc grpc.ClientConnInterface) GenerationServiceClient {
	return &generationServiceClient{cc}
}

func (c *generationServiceClient) GenerateResponseStream(ctx context.Context, in *GenerateResponseRequest, opts ...grpc.CallOption) (grpc.ServerStreamingClient[StreamResponse], error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	stream, err := c.cc.NewStream(ctx, &GenerationService_ServiceDesc.Streams[0], GenerationService_GenerateResponseStream_FullMethodName, cOpts...)
	if err != nil {
		return nil, err
	}
	x := &grpc.GenericClientStream[GenerateResponseRequest, StreamResponse]{ClientStream: stream}
	if err := x.ClientStream.SendMsg(in); err != nil {
		return nil, err
	}
	if err := x.ClientStream.CloseSend(); err != nil {
		return nil, err
	}
	return x, nil
}

// This type alias is provided for backwards compatibility with existing code that references the prior non-generic stream type by name.
type GenerationService_GenerateResponseStreamClient = grpc.ServerStreamingClient[StreamResponse]

func (c *generationServiceClient) GenerateRepsonseBatch(ctx context.Context, in *GenerateResponseRequest, opts ...grpc.CallOption) (*BatchResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(BatchResponse)
	err := c.cc.Invoke(ctx, GenerationService_GenerateRepsonseBatch_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// GenerationServiceServer is the server API for GenerationService service.
// All implementations must embed UnimplementedGenerationServiceServer
// for forward compatibility.
type GenerationServiceServer interface {
	GenerateResponseStream(*GenerateResponseRequest, grpc.ServerStreamingServer[StreamResponse]) error
	GenerateRepsonseBatch(context.Context, *GenerateResponseRequest) (*BatchResponse, error)
	mustEmbedUnimplementedGenerationServiceServer()
}

// UnimplementedGenerationServiceServer must be embedded to have
// forward compatible implementations.
//
// NOTE: this should be embedded by value instead of pointer to avoid a nil
// pointer dereference when methods are called.
type UnimplementedGenerationServiceServer struct{}

func (UnimplementedGenerationServiceServer) GenerateResponseStream(*GenerateResponseRequest, grpc.ServerStreamingServer[StreamResponse]) error {
	return status.Errorf(codes.Unimplemented, "method GenerateResponseStream not implemented")
}
func (UnimplementedGenerationServiceServer) GenerateRepsonseBatch(context.Context, *GenerateResponseRequest) (*BatchResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GenerateRepsonseBatch not implemented")
}
func (UnimplementedGenerationServiceServer) mustEmbedUnimplementedGenerationServiceServer() {}
func (UnimplementedGenerationServiceServer) testEmbeddedByValue()                           {}

// UnsafeGenerationServiceServer may be embedded to opt out of forward compatibility for this service.
// Use of this interface is not recommended, as added methods to GenerationServiceServer will
// result in compilation errors.
type UnsafeGenerationServiceServer interface {
	mustEmbedUnimplementedGenerationServiceServer()
}

func RegisterGenerationServiceServer(s grpc.ServiceRegistrar, srv GenerationServiceServer) {
	// If the following call pancis, it indicates UnimplementedGenerationServiceServer was
	// embedded by pointer and is nil.  This will cause panics if an
	// unimplemented method is ever invoked, so we test this at initialization
	// time to prevent it from happening at runtime later due to I/O.
	if t, ok := srv.(interface{ testEmbeddedByValue() }); ok {
		t.testEmbeddedByValue()
	}
	s.RegisterService(&GenerationService_ServiceDesc, srv)
}

func _GenerationService_GenerateResponseStream_Handler(srv interface{}, stream grpc.ServerStream) error {
	m := new(GenerateResponseRequest)
	if err := stream.RecvMsg(m); err != nil {
		return err
	}
	return srv.(GenerationServiceServer).GenerateResponseStream(m, &grpc.GenericServerStream[GenerateResponseRequest, StreamResponse]{ServerStream: stream})
}

// This type alias is provided for backwards compatibility with existing code that references the prior non-generic stream type by name.
type GenerationService_GenerateResponseStreamServer = grpc.ServerStreamingServer[StreamResponse]

func _GenerationService_GenerateRepsonseBatch_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GenerateResponseRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(GenerationServiceServer).GenerateRepsonseBatch(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: GenerationService_GenerateRepsonseBatch_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(GenerationServiceServer).GenerateRepsonseBatch(ctx, req.(*GenerateResponseRequest))
	}
	return interceptor(ctx, in, info, handler)
}

// GenerationService_ServiceDesc is the grpc.ServiceDesc for GenerationService service.
// It's only intended for direct use with grpc.RegisterService,
// and not to be introspected or modified (even as a copy)
var GenerationService_ServiceDesc = grpc.ServiceDesc{
	ServiceName: "generation.GenerationService",
	HandlerType: (*GenerationServiceServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "GenerateRepsonseBatch",
			Handler:    _GenerationService_GenerateRepsonseBatch_Handler,
		},
	},
	Streams: []grpc.StreamDesc{
		{
			StreamName:    "GenerateResponseStream",
			Handler:       _GenerationService_GenerateResponseStream_Handler,
			ServerStreams: true,
		},
	},
	Metadata: "proto/generation.proto",
}
